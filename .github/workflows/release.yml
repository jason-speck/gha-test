# This workflow creates draft releases with built binaries.
# It runs automatically after successful builds and can be manually triggered.
# The process:
# 1. Downloads build artifacts
# 2. Packages them by platform
# 3. Creates a draft release
# 4. Notifies PR author
name: Create Release

# Trigger on successful completion of build workflow
on:
  workflow_run:
    workflows: ["EXE builder"]  # Must match build workflow name exactly
    types:
      - completed              # Run after build workflow completes
    branches:
      - jason/fake-main        # Only for specified branches
  workflow_dispatch:           # Allow manual triggering

# Ensure only one release workflow runs at a time
# Prevents multiple drafts for the same version
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Need write permissions to create releases
permissions:
  contents: write

jobs:
  create_draft:
    # Only run if the build workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        
      # Download artifacts from the build workflow
      - name: Download all artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: pyinstaller_test.yml
          workflow_conclusion: success
          run_id: ${{ github.event.workflow_run.id }}
          
      # Extract version number from artifact names
      - name: Get version from artifacts
        id: version
        run: |
          VERSION=$(ls hello-*-* | head -n1 | cut -d- -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      # Prepare release files
      # Creates zip archives for each platform
      # Ensures macOS installer is bundled with its binary
      - name: Prepare files for release
        run: |
          # Create directory structure
          mkdir release-files
          mkdir -p release-files/hello-linux
          mkdir -p release-files/hello-windows
          mkdir -p release-files/hello-macos
          
          # Copy files to platform-specific directories
          cp hello-*-linux/hello* release-files/hello-linux/hello
          cp hello-*-windows/hello* release-files/hello-windows/hello.exe
          cp hello-*-macos/hello* release-files/hello-macos/hello
          cp hello-*-macos/install.sh release-files/hello-macos/
          
          # Create platform-specific zip archives
          cd release-files
          zip -r hello-linux.zip hello-linux
          zip -r hello-windows.zip hello-windows
          zip -r hello-macos.zip hello-macos
          
      # Create draft release with all assets
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: true  # Create as draft for manual review
          files: |
            release-files/*.zip
          body: |
            ## ‚ö†Ô∏è This release is pending review
            
            ### Review Checklist:
            - [ ] Binaries have been tested
            - [ ] Version numbers are correct
            
            To approve: Edit this release and click "Publish release"
            To reject: Delete this draft release

      # Notify PR author that release is ready for testing
      # Only runs if the workflow was triggered by a PR
      - name: Comment on PR
        if: github.event.workflow_run.pull_requests != null && github.event.workflow_run.pull_requests[0] != null
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.workflow_run.pull_requests[0];
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: pr.number,
              body: `üöÄ New build v${process.env.VERSION} ready for testing!
              
              [Click here to test the draft release](${context.serverUrl}/${context.repo.owner}/${context.repo.name}/releases)`
            })
        env:
          VERSION: ${{ steps.version.outputs.version }}

    # Link to the release in GitHub UI
    environment:
      name: testing
      url: ${{ steps.create_release.outputs.html_url }}
