name: EXE builder
on:
  push:
    branches:
      - jason/fake-main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            artifact_name: macos
            needs_installer: true
          - os: ubuntu-latest
            artifact_name: linux
            needs_installer: false
          - os: windows-latest
            artifact_name: windows
            needs_installer: false
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Still need full history for commit count
      
      - name: Get version
        id: version
        run: |
          # Read major.minor from version.txt (e.g., "0.2")
          BASE_VERSION=$(cat version.txt)
          
          # Create base tag name (e.g., "v0.2")
          TAG="v${BASE_VERSION// /}"
          
          # Find the commit hash where version.txt was last modified
          # This is our reference point for when the version was bumped
          VERSION_COMMIT=$(git log -1 --pretty=format:%H -- version.txt)
          
          # Count commits since version.txt was changed, excluding the change commit itself
          # This gives us our patch number, starting from 0 after each version bump
          # "^$VERSION_COMMIT^" means: start counting after the parent of the version change commit
          PATCH=$(git rev-list --count HEAD "^$VERSION_COMMIT^")
          
          # Combine base version and patch (e.g., "0.2.3")
          VERSION="${BASE_VERSION// /}.${PATCH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Create and push a tag for this specific build (e.g., "v0.2.3")
          # This creates a permanent reference to this exact build
          BUILD_TAG="${TAG}.${PATCH}"
          git tag -a "$BUILD_TAG" -m "Build version $VERSION" || true
          git push origin "$BUILD_TAG" || true
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
      
      - name: Build with PyInstaller
        run: |
          pyinstaller hello.spec
      
      - name: Prepare macOS installer
        if: matrix.needs_installer
        run: |
          cd dist
          chmod +x hello
          cat > install.sh << 'EOF'
          #!/bin/bash
          # Simple installer for hello application v${{ steps.version.outputs.version }}
          
          # Remove quarantine attribute
          xattr -d com.apple.quarantine hello 2>/dev/null || true
          
          # Make executable
          chmod +x hello
          
          echo "Installation complete! You can now run ./hello"
          EOF
          chmod +x install.sh

      - name: Upload with installer
        if: matrix.needs_installer
        uses: actions/upload-artifact@v4
        with:
          name: hello-${{ steps.version.outputs.version }}-${{ matrix.artifact_name }}
          path: |
            dist/hello
            dist/install.sh

      - name: Upload without installer
        if: ${{ !matrix.needs_installer }}
        uses: actions/upload-artifact@v4
        with:
          name: hello-${{ steps.version.outputs.version }}-${{ matrix.artifact_name }}
          path: dist/hello*
  
  
    
