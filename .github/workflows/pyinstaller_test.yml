# This workflow builds platform-specific binaries for the application.
# It runs on pushes to specified branches and can be manually triggered.
# The process:
# 1. Creates a version tag based on version.txt + commit count
# 2. Builds binaries for Windows, Linux, and macOS
# 3. Uploads artifacts for the release workflow to use
name: EXE builder
on:
  push:
    branches:
      - main  # Trigger on pushes to specific branches
  workflow_dispatch:     # Allow manual triggering of workflow

# Ensure only one workflow runs at a time for each branch/PR
# This prevents race conditions with versioning and tagging
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Need write permissions to create git tags
permissions:
  contents: write

# Ensure consistent shell usage across different platforms
defaults:
  run:
    shell: bash

jobs:
  # First job: Create and push a version tag
  # This ensures consistent versioning across all builds
  tag:
    runs-on: ubuntu-latest
    outputs:
      # Make version available to other jobs
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Full git history needed for version calculation

      # Configure git for creating tags
      # Uses GitHub Actions bot identity for audit trail
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Calculate version number and create git tag
      # Version format: <major>.<minor>.<patch>
      # - major.minor comes from version.txt
      # - patch is commit count since last version.txt change
      - name: Get version and create tag
        id: version
        run: |
          # Read major.minor from version.txt (e.g., "0.2")
          BASE_VERSION=$(cat version.txt)
          
          # Create base tag name (e.g., "v0.2")
          TAG="v${BASE_VERSION// /}"
          
          # Find the last matching version tag and extract its patch number
          LAST_TAG=$(git tag -l "${TAG}.*" | sort -V | tail -n1 || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            # No previous tag exists, start at 0
            PATCH=0
          else
            # Extract patch number from last tag and increment by 1
            LAST_PATCH=$(echo "$LAST_TAG" | awk -F. '{print $NF}')
            PATCH=$((LAST_PATCH + 1))
          fi
          
          # Combine for full version (e.g., "0.2.3")
          VERSION="${BASE_VERSION// /}.${PATCH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Tag this specific build
          BUILD_TAG="${TAG}.${PATCH}"
          git tag -a "$BUILD_TAG" -m "Build version $VERSION"
          git push origin "$BUILD_TAG"

  # Second job: Build binaries for each platform
  build:
    needs: tag  # Wait for version tag to be created
    strategy:
      matrix:
        # Define build configurations for each platform
        include:
          - os: macos-latest
            artifact_name: macos
            needs_installer: true    # macOS needs install script
          - os: ubuntu-latest
            artifact_name: linux
            needs_installer: false   # Linux binary is self-contained
          - os: windows-latest
            artifact_name: windows
            needs_installer: false   # Windows binary is self-contained
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0  # Full history needed for version info

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.11'  # Specific version for reproducibility
      
      # Install build dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
      
      # Create binary using PyInstaller
      - name: Build with PyInstaller
        run: |
          pyinstaller hello.spec
      
      # Create installer script for macOS
      # This handles:
      # 1. Quarantine attribute removal
      # 2. Executable permissions
      # 3. Installation instructions
      - name: Prepare macOS installer
        if: matrix.needs_installer
        run: |
          cd dist
          chmod +x hello
          cat > install.sh << 'EOF'
          #!/bin/bash
          # Simple installer for hello application v${{ steps.version.outputs.version }}
          
          # Remove quarantine attribute
          xattr -d com.apple.quarantine hello 2>/dev/null || true
          
          # Make executable
          chmod +x hello
          
          echo "Installation complete! You can now run ./hello"
          EOF
          chmod +x install.sh

      # Upload artifacts for platforms needing installer
      - name: Upload with installer
        if: matrix.needs_installer
        uses: actions/upload-artifact@v4
        with:
          name: hello-${{ needs.tag.outputs.version }}-${{ matrix.artifact_name }}
          path: |
            dist/hello
            dist/install.sh

      # Upload artifacts for platforms without installer
      - name: Upload without installer
        if: ${{ !matrix.needs_installer }}
        uses: actions/upload-artifact@v4
        with:
          name: hello-${{ needs.tag.outputs.version }}-${{ matrix.artifact_name }}
          path: dist/hello*
